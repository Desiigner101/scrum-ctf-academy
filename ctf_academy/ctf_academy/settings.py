"""
Django settings for ctf_academy project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-5r$$+%bglmi$rxl0axicrcym!@#3%9%oyf2j_(@j*mxdar^6@c'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'accounts',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'accounts.middleware.AutoLogoutMiddleware',  # << must be after auth
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]



ROOT_URLCONF = 'ctf_academy.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ctf_academy.wsgi.application'


# Load environment variables from .env if present
load_dotenv()

# Database (Supabase Postgres)
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

USE_DIRECT_DB = os.getenv('DB_USE_DIRECT', '0') in ('1', 'true', 'True')

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        # Prefer example's lowercase envs; fallback to POSTGRES_*; final defaults
        'NAME': os.getenv('dbname', os.getenv('POSTGRES_DB', 'postgres')),
        'USER': os.getenv('user', os.getenv('POSTGRES_USER', 'postgres')),
        'PASSWORD': os.getenv('password', os.getenv('POSTGRES_PASSWORD', '')),
        'HOST': os.getenv('host', os.getenv('POSTGRES_HOST', '127.0.0.1')),
        # Default to Supabase transaction pooler (6543) unless DB_USE_DIRECT is set
        'PORT': os.getenv('port') or (os.getenv('POSTGRES_PORT') or ('5432' if USE_DIRECT_DB else '6543')),
        'OPTIONS': {
            'sslmode': os.getenv('sslmode', 'require'),
            # Reasonable defaults; tweak as needed
            'connect_timeout': int(os.getenv('PGCONNECT_TIMEOUT', '10')),
            'options': os.getenv('PG_OPTIONS', '-c statement_timeout=60000'),
        },
        # Pooler compatibility
        'DISABLE_SERVER_SIDE_CURSORS': True,
    }
}

# Short-lived connections for pooler
CONN_MAX_AGE = 0


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Redirect to dashboard after login
LOGIN_URL = '/dashboard/login/'
LOGOUT_REDIRECT_URL = '/dashboard/login/'
LOGIN_REDIRECT_URL = '/dashboard/'   # after successful login

# Use custom user model
AUTH_USER_MODEL = 'accounts.User'

# Prefer Argon2 for password hashing
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
# Session expires when the user closes the browser
SESSION_EXPIRE_AT_BROWSER_CLOSE = False

SESSION_COOKIE_SECURE = False
SESSION_COOKIE_AGE = 100  # 100 seconds

SESSION_COOKIE_HTTPONLY = True

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
